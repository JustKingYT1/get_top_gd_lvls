import requests
import time
import os
from search import LevelSearch
from settings import BOT_TOKEN, LOCAL_DATA_PATH
from datetime import datetime

class DemonlistBotSync:
    def __init__(self):
        self.token = BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.searcher = None
        self.offset = None
        self._last_mtime = None  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π JSON

    def load_data(self):
        if os.path.exists(LOCAL_DATA_PATH):
            print(f"üîÑ [{datetime.now()}] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON...")
            self.searcher = LevelSearch.from_file(LOCAL_DATA_PATH)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —É—Ä–æ–≤–Ω–µ–π: {len(self.searcher.data)}")
        else:
            print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª demonlist.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.searcher = LevelSearch([])

    def reload_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è JSON"""
        self.load_data()

    def check_reload(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±–Ω–æ–≤–∏–ª—Å—è –ª–∏ JSON, –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            mtime = os.path.getmtime(LOCAL_DATA_PATH)
            if self._last_mtime is None:
                self._last_mtime = mtime
            elif mtime != self._last_mtime:
                print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ demonlist.json, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
                self.reload_data()
                self._last_mtime = mtime
        except FileNotFoundError:
            pass

    def send_message(self, chat_id, text):
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        try:
            requests.post(f"{self.api_url}/sendMessage", data=data, timeout=10)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    def handle_message(self, message):
        chat_id = message["chat"]["id"]
        text = message.get("text", "")

        if text.startswith("/start"):
            start_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∏–∑ Demonlist.\n\n"
                "üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
                " - <b>1</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–Ω–≥—É\n"
                " - <b>slaughterhouse</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
                " - <b>len > 2m30s</b> –∏–ª–∏ <b>len > 150s</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–ª–∏–Ω–µ"
            )
            self.send_message(chat_id, start_text)
            return

        query = text.strip()
        if not query:
            self.send_message(chat_id, "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        if not self.searcher or not self.searcher.data:
            self.send_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        if query.lower().startswith("len >"):
            results = self.searcher.search_by_duration(query[5:].strip())
        else:
            results = self.searcher.search_by_name_or_rank(query)

        if not results:
            self.send_message(chat_id, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        results = sorted(results, key=lambda x: x["rank"])
        reply_parts = []
        for r in results[:10]:
            duration = r["duration_seconds"]
            length_str = f"{duration // 60}:{duration % 60:02d}"
            reply_parts.append(
                f"#{r['rank']} ‚Äî <b>{r['name']}</b>\n"
                f"üïí {length_str}\n"
                f"üîó <a href='{r['link']}'>–°—Å—ã–ª–∫–∞</a>"
            )

        text_reply = "\n\n".join(reply_parts)
        if len(results) > 10:
            text_reply += f"\n\n...–∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

        self.send_message(chat_id, text_reply)

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª polling –±–æ—Ç–∞ —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º JSON"""
        self.load_data()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

        while True:
            self.check_reload()  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

            params = {"timeout": 100, "offset": self.offset}
            try:
                response = requests.get(f"{self.api_url}/getUpdates", params=params, timeout=120)
                updates = response.json().get("result", [])
                for update in updates:
                    self.offset = update["update_id"] + 1
                    if "message" in update:
                        self.handle_message(update["message"])
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
                time.sleep(5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)


if __name__ == "__main__":
    bot = DemonlistBotSync()
    bot.run()
