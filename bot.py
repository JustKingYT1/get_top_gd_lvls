import requests
import time
from search import LevelSearch
from settings import BOT_TOKEN, GITHUB_RAW_URL, LOCAL_DATA_PATH
import os

class DemonlistBotSync:
    def __init__(self):
        self.token = BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.searcher = None
        self.offset = None  # –¥–ª—è getUpdates

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å GitHub –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ."""
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å GitHub...")
        self.searcher = LevelSearch.from_url(GITHUB_RAW_URL, LOCAL_DATA_PATH)
        if not self.searcher.data:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å GitHub, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...")
            if os.path.exists(LOCAL_DATA_PATH):
                self.searcher = LevelSearch.from_file(LOCAL_DATA_PATH)
            else:
                print("‚ùå –ù–µ—Ç –Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö, –Ω–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
                self.searcher = LevelSearch([])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {len(self.searcher.data)}")

    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        requests.post(f"{self.api_url}/sendMessage", data=data)

    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        chat_id = message["chat"]["id"]
        text = message.get("text", "")

        if text.startswith("/start"):
            start_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∏–∑ Demonlist.\n\n"
                "üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
                " - <b>1</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–Ω–≥—É\n"
                " - <b>slaughterhouse</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
                " - <b>len > 2m30s</b> –∏–ª–∏ <b>len > 150s</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–ª–∏–Ω–µ"
            )
            self.send_message(chat_id, start_text)
            return

        query = text.strip()
        if not query:
            self.send_message(chat_id, "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        if not self.searcher or not self.searcher.data:
            self.send_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        if query.lower().startswith("len >"):
            results = self.searcher.search_by_duration(query[5:].strip())
        else:
            results = self.searcher.search_by_name_or_rank(query)

        if not results:
            self.send_message(chat_id, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        results = sorted(results, key=lambda x: x["rank"])
        reply_parts = []
        for r in results[:10]:
            duration = r["duration_seconds"]
            length_str = f"{duration // 60}:{duration % 60:02d}"
            reply_parts.append(
                f"#{r['rank']} ‚Äî <b>{r['name']}</b>\n"
                f"üïí {length_str}\n"
                f"üîó <a href='{r['link']}'>–°—Å—ã–ª–∫–∞</a>"
            )

        text_reply = "\n\n".join(reply_parts)
        if len(results) > 10:
            text_reply += f"\n\n...–∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

        self.send_message(chat_id, text_reply)

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞ (polling)."""
        self.load_data()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")

        while True:
            params = {"timeout": 100, "offset": self.offset}
            try:
                response = requests.get(f"{self.api_url}/getUpdates", params=params, timeout=120)
                updates = response.json().get("result", [])
                for update in updates:
                    self.offset = update["update_id"] + 1
                    if "message" in update:
                        self.handle_message(update["message"])
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
                time.sleep(5)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)
