# bot.py
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from search import LevelSearch
from settings import BOT_TOKEN, GITHUB_RAW_URL, LOCAL_DATA_PATH
import os
import aiogram

class DemonlistBot:
    def __init__(self):
        self.bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode="HTML")
        )
        self.dp = Dispatcher()
        self.searcher = None

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
        self.dp.message.register(self.start_command, CommandStart())
        self.dp.message.register(self.handle_query)

    async def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å GitHub (–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ GitHub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)."""
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å GitHub...")
        self.searcher = LevelSearch.from_url(GITHUB_RAW_URL, LOCAL_DATA_PATH)
        if not self.searcher.data:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å GitHub, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...")
            if os.path.exists(LOCAL_DATA_PATH):
                self.searcher = LevelSearch.from_file(LOCAL_DATA_PATH)
            else:
                print("‚ùå –ù–µ—Ç –Ω–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö, –Ω–∏ —Å–µ—Ç–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
                self.searcher = LevelSearch([])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Ä–æ–≤–Ω–µ–π: {len(self.searcher.data)}")

    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –∏–∑ Demonlist.\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            " - <b>1</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–Ω–≥—É\n"
            " - <b>slaughterhouse</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            " - <b>len > 2m30s</b> –∏–ª–∏ <b>len > 150s</b> ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–ª–∏–Ω–µ"
        )
        await message.answer(text)

    async def handle_query(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)."""
        query = message.text.strip()
        if not query:
            await message.answer("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        if not self.searcher or not self.searcher.data:
            await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        if query.lower().startswith("len >"):
            results = self.searcher.search_by_duration(query[5:].strip())
        else:
            results = self.searcher.search_by_name_or_rank(query)

        if not results:
            await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        results = sorted(results, key=lambda x: x["rank"])
        reply_parts = []
        for r in results[:10]:
            duration = r["duration_seconds"]
            length_str = f"{duration // 60}:{duration % 60:02d}"
            reply_parts.append(
                f"#{r['rank']} ‚Äî <b>{r['name']}</b>\n"
                f"üïí {length_str}\n"
                f"üîó <a href='{r['link']}'>–°—Å—ã–ª–∫–∞</a>"
            )

        text = "\n\n".join(reply_parts)
        if len(results) > 10:
            text += f"\n\n...–∏ –µ—â—ë {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

        await message.answer(text)

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        await self.load_data()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.dp.start_polling(self.bot)
