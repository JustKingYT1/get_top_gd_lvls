# search.py
import json
import re
import settings
import requests

class LevelSearch:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ –∏–º–µ–Ω–∏, —Ä–∞–Ω–≥—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def __init__(self, data):
        self.data = self._process_data(data)

    def _process_data(self, raw_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è 'length' –≤ —Å–µ–∫—É–Ω–¥—ã."""
        processed = []
        for level in raw_data:
            length_str = level.get("length")
            if length_str and ':' in length_str:
                try:
                    minutes, seconds = map(int, length_str.split(':'))
                    level['duration_seconds'] = minutes * 60 + seconds
                except (ValueError, TypeError):
                    level['duration_seconds'] = 0 # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            else:
                level['duration_seconds'] = 0
            processed.append(level)
        return processed

    @classmethod
    def from_file(cls, path=settings.OUTPUT_FILE):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —É—Ä–æ–≤–Ω–µ–π –∏–∑ {path}")
            return cls(data)
        except FileNotFoundError:
            print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
            return cls([])

    @classmethod
    def from_url(cls, url):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ URL –∏–∑ GitHub Raw."""
        try:
            response = requests.get(url)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (404, 500..)
            data = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —É—Ä–æ–≤–Ω–µ–π –ø–æ URL.")
            return cls(data)
        except requests.RequestException as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ URL: {e}")
            return cls([])

    def _parse_user_duration(self, query: str) -> int:
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2m30s') –≤ —Å–µ–∫—É–Ω–¥—ã."""
        total_seconds = 0
        # –ò—â–µ–º –º–∏–Ω—É—Ç—ã (e.g., 2m, 5min)
        minutes_match = re.search(r'(\d+)\s*m', query, re.IGNORECASE)
        if minutes_match:
            total_seconds += int(minutes_match.group(1)) * 60
        
        # –ò—â–µ–º —Å–µ–∫—É–Ω–¥—ã (e.g., 90s, 30sec)
        seconds_match = re.search(r'(\d+)\s*s', query, re.IGNORECASE)
        if seconds_match:
            total_seconds += int(seconds_match.group(1))

        # –ï—Å–ª–∏ –Ω–µ—Ç 'm' –∏–ª–∏ 's', —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–µ–∫—É–Ω–¥—ã
        if not minutes_match and not seconds_match and query.isdigit():
            total_seconds = int(query)
            
        return total_seconds

    def search_by_name_or_rank(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ä–∞–Ω–≥—É."""
        if query.isdigit():
            rank = int(query)
            return [lvl for lvl in self.data if lvl["rank"] == rank]
        
        query_low = query.lower()
        return [lvl for lvl in self.data if query_low in lvl["name"].lower()]

    def search_by_duration(self, query):
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª–∏–Ω–Ω–µ–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        required_seconds = self._parse_user_duration(query)
        if required_seconds == 0:
            return []
        
        print(f"–ò—â–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª–∏–Ω–Ω–µ–µ {required_seconds} —Å–µ–∫—É–Ω–¥...")
        return [lvl for lvl in self.data if lvl['duration_seconds'] >= required_seconds]

    def interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞."""
        if not self.data:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        while True:
            prompt = (
                "\nüîé –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                " - –†–∞–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1')\n"
                " - –ß–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'slaughterhouse')\n"
                " - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'len > 2m30s' –∏–ª–∏ 'len > 150s')\n"
                "   (–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n> "
            )
            q = input(prompt).strip()

            if not q:
                break

            results = []
            if q.lower().startswith('len >'):
                duration_query = q[5:].strip()
                results = self.search_by_duration(duration_query)
            else:
                results = self.search_by_name_or_rank(q)
            
            if not results:
                print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞–Ω–≥—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            results.sort(key=lambda x: x["rank"])

            print(f"\n‚ú® –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            for r in results:
                duration = r['duration_seconds']
                length_str = f"{duration // 60}:{duration % 60:02d}"
                print(f"  #{r['rank']:<4} - {r['name']} (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {length_str})\n     {r['link']}")